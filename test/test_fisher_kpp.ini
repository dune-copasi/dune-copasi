[grid]
dimension = 2
refinement_level = 8

[parser_context]
r.type = constant
r.value = 4.8e-1

K.type = constant
K.value = 1

y_location.type = constant
y_location.value = 0.8

gauss.type = function
gauss.expression = x, y, z: exp(-(x^2+y^2+z^2)/(4*0.0001)) / (4*3.14159265359*0.0001)/800

diffusion.type = constant
diffusion.value = 0.000037

rng.type = random_field
rng.grid.cells = 10000 10000
rng.grid.extensions = 1 1
rng.randomField.transform = logNormal
rng.stochastic.corrLength = 0.1
rng.stochastic.covariance = exponential
rng.stochastic.variance = 0.1
# rng.writer.vtk.path = fisher_kpp_diffusion

crypt.type = function
crypt.expression = x: y_location-(1/1.5*(exp(-(x - 0.2)^4/1e-6) + exp(-(x - 0.35)^4/1e-6) + exp(-(x - 0.5)^4/1e-6) + exp(-(x - 0.65)^4/1e-6) + exp(-(x - 0.8)^4/1e-6)))

[compartments]
domain.type = expression
domain.expression = 1

[model.scalar_field.u]
compartment = domain
storage.expression = 1
reaction.expression = r*u*(1-u/K)
reaction.jacobian.u.expression = (r-2*r*u/K)
cross_diffusion.u.expression = crypt(position_x) > position_y ? diffusion * rng(position_x, position_y) : diffusion*20
initial.expression = gauss(position_x - 0.55, position_y - 0.5, position_z)

[model.time_step_operator]
time_end = 100
time_step_max = 0.5

[model.writer.vtk]
path = fisher_kpp
