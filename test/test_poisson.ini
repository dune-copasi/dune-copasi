[grid]
dimension = 2
refinement_level = 5

[parser_context]
dim.type = constant
dim.value = 2

[compartments.domain]
type = expression
expression = 1

[model]
is_linear = true

[model.scalar_field.u]
compartment = domain
cross_diffusion.u.expression = 1
reaction.expression = -2*dim
constrain.expression = in_boundary ? position_x^2+position_y^2+position_z^2 : no_value
initial.expression = 0

[model.reduce]
# ||u - u_h||
u_error.evaluation.expression = (u - (position_x^2+position_y^2+position_z^2))^2
u_error.transformation.expression = arg: sqrt(arg)
u_error.warn.expression = arg: arg > 1e-2

[model.writer.vtk]
path = poisson
