
[grid]
dimension = 2
refinement_level = 7

[parser_context]
parser_type = ExprTk

tau_in.type = constant
tau_in.value = 0.1 # ms

tau_out.type = constant
tau_out.value = 1 # ms

tau_open.type = constant
tau_open.value = 80 # ms

tau_close.type = constant
tau_close.value = 60 # ms

D.type = constant
D.value = 1e-4 # 1/(\Omega*cm)

A_m.type = constant
A_m.value = 20e-2

u_0.type = constant
u_0.value = 0.13


gauss.type = function
gauss.expression = x, y, z: exp(-(x^2+y^2+z^2)/(4*0.0001)) / (4*3.14159265359*0.0001)/400

pulse.type = function
pulse.expression = t, t0, dt: sqrt((t-t0)^2)< dt ? 1 : 0

Heaviside.type = function
Heaviside.expression = t, t0 : (t > t0) ? 1 : 0

periodic.type = function
periodic.expression = t : cos(t) > 0.95 ? 1 : 0

rng.type = random_field
rng.grid.cells = 1000 1000
rng.grid.extensions = 1 1
rng.randomField.transform = logNormal
rng.stochastic.corrLength = 0.10
rng.stochastic.covariance = exponential
rng.stochastic.variance = 0.2
rng.writer.vtk.path = D_slow

[compartments]
domain.type = expression
domain.expression = 1

[model]
parser_type = ExprTk

[model.scalar_field.u]
compartment = domain
storage.expression = 1
reaction.expression = A_m*(z*u^2*(1-u)/tau_in - u/tau_out) + periodic( 2 * 3.14 * time/200)*gauss(position_x - 0.05, position_y - 0.05, position_z) + 0.85*pulse(time, 470, 20)*gauss(position_x - 0.675, position_y - 0.15, position_z)
reaction.jacobian.u.expression = A_m*(u*z*(2-3*u)/tau_in-1/tau_out)
reaction.jacobian.z.expression = A_m*(1-u)*u^2/tau_in
cross_diffusion.u.expression = D - 0.15 * D * rng(position_x,position_y)
initial.expression = 0.01

[model.scalar_field.z]
compartment = domain
storage.expression = 1
reaction.expression = (u <= u_0) ? ( (1 - z)/(tau_open*(1+0.25*rng(position_x,position_y))) ): (-z/tau_close)
reaction.jacobian.z.expression = (u <= u_0) ? ( -1/(tau_open*(1+0.25*rng(position_x,position_y))) ) : (-1/tau_close)
initial.expression = 1

[model.time_step_operator]
time_end = 5000
time_step_max = 10
linear_solver.type = RestartedGMRes
linear_solver.preconditioner.type = SSOR

[model.writer.vtk]
path = 2Dtissue_MS_model

[model.reduce]
u_max.evaluation.expression = u
u_max.reduction.expression = init, val: max(init, val)
u_max.initial.value = -1e100
u_max.warn.expression = arg: arg > 1

u_min.evaluation.expression = u
u_min.reduction.expression = init, val: min(init, val)
u_min.initial.value = 1e100
u_min.warn.expression = arg: arg < 0

z_max.evaluation.expression = z
z_max.reduction.expression = init, val: max(init, val)
z_max.initial.value = -1e100
z_max.warn.expression = arg: arg > 1

z_min.evaluation.expression = z
z_min.reduction.expression = init, val: min(init, val)
z_min.initial.value = 1e100
z_min.warn.expression = arg: arg < 0
