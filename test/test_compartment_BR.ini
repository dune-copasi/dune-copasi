# Beeler - Reuter model of cardiac cell electrophysiology
# https://physoc.onlinelibrary.wiley.com/doi/epdf/10.1113/jphysiol.1977.sp011853

[grid]
dimension = 2
extensions = 0.5 0.5
refinement_level = 5

[parser_context]
# ----------------------------------------------------------------------------------------------------
# Part 1 - Potassium current (Voltage dependent) - (OK)
# ----------------------------------------------------------------------------------------------------
i_K1.type = function
i_K1.expression = V : 0.35 * ( 4 * (exp(0.04 * (V + 85)) - 1) / (exp(0.08 * (V + 53)) + exp(0.04 * (V + 53))) + 0.2 * (V + 23) / (1 - exp(-0.04 * (V + 23))) )

di_K1__dV.type = function
di_K1__dV.expression = V : 0.35 * ( (0.0192051 * exp(0.04 * V) + 0.32 * exp(0.08 * V) - 4.79426 * exp(0.12 * V))/( (exp(0.04 * V) + 8.33114 * exp(0.08 * V))^2 ) + (0.2 * exp(0.04 * V) * (-0.0159408 * V + exp(0.04 * V) - 0.765157))/((0.398519 - exp(0.04 * V))^2) )

# ----------------------------------------------------------------------------------------------------
# Part 2 - prim Potassium (Voltage and time dependent outward current)
# ----------------------------------------------------------------------------------------------------
i_x1.type = function
i_x1.expression = V : 0.8*(exp(0.04*(V + 77)) - 1)/(exp(0.04*(V + 35)))

di_x1__dV.type = function
di_x1__dV.expression = V :  0.0078911 * exp(-0.04 * V)

# ----------------------------------------------------------------------------------------------------
# Part 3 - Sodium current
# ----------------------------------------------------------------------------------------------------
g_Na_bar.type = constant
g_Na_bar.value = 4.0

g_NaC.type = constant
g_NaC.value = 0.003

E_Na.type = constant
E_Na.value = 50

# Sodium conductance
# g_Na ( i_Na = g_Na * (V_m - E_Na) where g_Na = \bar{g_Na} * m³ * h * j + g_NaC
g_Na.type = function
g_Na.expression = m, h, j : g_Na_bar * m^3 * h * j + g_NaC

dg_Na__dm.type = function
dg_Na__dm.expression = m, h, j : g_Na_bar * 3 * m^2 * h * j

dg_Na__dh.type = function
dg_Na__dh.expression = m, h, j : g_Na_bar * m^3 * j

dg_Na__dj.type = function
dg_Na__dj.expression = m, h, j : g_Na_bar * m^3 * h

# ----------------------------------------------------------------------------------------------------
# Part 4 - Slow current
# ----------------------------------------------------------------------------------------------------

g_s_bar.type = constant
g_s_bar.value = 0.09

g_s.type = function
g_s.expression = d, f : g_s_bar * d * f

dg_s__dd.type = function
dg_s__dd.expression = d, f : g_s_bar * f

dg_s__df.type = function
dg_s__df.expression = d, f : g_s_bar * d

E_s.type = function
E_s.expression = Ca : -82.3 - 13.0287 * ln( Ca )

dE_s__dCa.type = function
dE_s__dCa.expression = Ca : -13.0287 / Ca

# ----------------------------------------------------------------------------------------------------
# Part 5 - Gating functions
# ----------------------------------------------------------------------------------------------------

# --------------------
# gating function - x1 (OK)
a_x1.type = function
a_x1.expression = V : (0.0005 * exp( 0.083 *(V + 50)) ) / (exp( 0.057 * (V + 50)) + 1)

da_x1__dV.type = function
da_x1__dV.expression = V : (0.0005 * 0.083 * exp(0.083 * (50 + V)) )/(exp(0.057 * (50 + V)) + 1) - (0.057 * exp(0.057 * (50 + V)) * (0.0005 * exp(0.083 * (50 + V)) ))/((exp(0.057 * (50 + V)) + 1)^2)

b_x1.type = function
b_x1.expression = V : (0.0013 * exp( -0.06*(V + 20)) ) / (exp( -0.04 * (V + 20)) + 1)

db_x1__dV.type = function
db_x1__dV.expression = V : (0.0013 * (-0.06) * exp(-0.06 * (20 + V)) )/(exp(-0.04 * (20 + V)) + 1) - (-0.04 * exp(-0.04 * (20 + V)) * (0.0013 * exp(-0.06 * (20 + V)) ))/((exp(-0.04 * (20 + V)) + 1)^2)

# --------------------
# gating function - m (OK)
a_m.type = function
a_m.expression = V : (V + 47) / (1 - exp(-0.1 * (V + 47)))

da_m__dV.type = function
da_m__dV.expression = V :  (exp(0.1 * V) * (-0.000909528 * V - 0.0518431 + exp(0.1 * V) ))/((0.00909528 - exp(0.1 * V))^2)

b_m.type = function
b_m.expression = V : 40 * exp(-0.056 * (V + 72))

db_m__dV.type = function
db_m__dV.expression = V : -0.0397349 * exp(-0.056 * V)

# --------------------
# gating function - h (OK)
a_h.type = function
a_h.expression = V : 0.126 * exp(-0.25 * (V + 77))

da_h__dV.type = function
da_h__dV.expression = V : -0.0315 * exp(-0.25 * (77 + V))

b_h.type = function
b_h.expression = V : 1.7 / (1 + exp(-0.082 * (V + 22.5)))

db_h__dV.type = function
db_h__dV.expression = V : (0.1394 * exp(-0.082*(V + 22.5)))/(( 1 + exp(-0.082*(V + 22.5)) )^2)

# --------------------
# gating function - j (OK)
a_j.type = function
a_j.expression = V : 0.055 * exp(-0.25 * (V + 78)) / (1 + exp(-0.2 * (V + 78)))

da_j__dV.type = function
da_j__dV.expression = V : (0.055 * (-0.25) * exp(-0.25 * (78 + V)) ) / ( 1 + exp(-0.2 * (78 + V))  ) + (0.2 * exp(-0.2 * (78 + V)) * 0.055 * exp(-0.25 * (78 + V)) )/((1 + exp(-0.2 * (78 + V)) )^2)

b_j.type = function
b_j.expression = V : (0.3 ) / ( 1 + exp( -0.1*(V + 32)) )

db_j__dV.type = function
db_j__dV.expression = V : (0.03 * exp(-0.1 * (V + 32)))/((1 + exp(-0.1 * (V + 32)) )^2)

# --------------------
# gating function - d
a_d.type = function
a_d.expression = V : 0.095 * exp(-0.01 * (V - 5)) / ( 1 + exp(-0.072 * (V - 5)) )

da_d__dV.type = function
da_d__dV.expression = V : (0.095 * (-0.01) * exp(-0.01 * (-5 + V)) )/(exp(-0.072 * (-5 + V)) + 1) + (0.072 * exp(-0.072 * (-5 + V)) * (0.095 * exp(-0.01 * (-5 + V)) ))/((exp(-0.072 * (-5 + V)) + 1)^2)

b_d.type = function
b_d.expression = V : (0.070 * exp(-0.017*(V + 44)) ) / (exp( 0.05*(V + 44)) + 1)

db_d__dV.type = function
db_d__dV.expression = V : (0.070 * (-0.017) * exp(-0.017 * (44 + V)) )/(exp(0.05 * (44 + V)) + 1) - (0.05 * exp(0.05 * (44 + V)) * 0.070 * exp(-0.017 * (44 + V)) )/((exp(0.05 * (44 + V)) + 1)^2 )

# --------------------
# gating function - f
a_f.type = function
a_f.expression = V : (0.012 * exp(-0.008*(V + 28)) ) / (exp( 0.15*(V + 28)) + 1)

da_f__dV.type = function
da_f__dV.expression = V : (0.012 * (-0.008) * exp(-0.008 * (28 + V)) )/(exp(0.15 * (28 + V)) + 1) - (0.15 * exp(0.15 * (28 + V)) * 0.012 * exp(-0.008 * (28 + V)) )/((exp(0.15 * (28 + V)) + 1)^2)

b_f.type = function
b_f.expression = V : (0.0065 * exp(-0.02*(V + 30)) ) / (exp( -0.20*(V + 30)) + 1)

db_f__dV.type = function
db_f__dV.expression = V : (0.0065 * (-0.020) * exp(-0.02 * (30 + V)) )/(exp(-0.20 * (30 + V)) + 1) + (0.20 * exp(-0.20 * (30 + V)) * 0.0065 * exp(-0.02 * (30 + V)) )/((exp(-0.20 * (30 + V)) + 1)^2)

# ----------------------------------------------------------------------------------------------------
# Part 6 - Other functions
# ----------------------------------------------------------------------------------------------------

C_m.type = constant
C_m.value = 1 # [µF/cm²]

D.type = constant
D.value = 1e-3

gamma_i.type = constant
gamma_i.value = 1e-3 # 1/(\Omega*cm)

gamma_b.type = constant
gamma_b.value = 1e-4 # 1/(\Omega*cm)

gamma_e.type = constant
gamma_e.value = 1e-3 # 1/(\Omega*cm)

edge.type =function
edge.expression = x, y, z: sqrt(x^2) < 0.01 ? 1 : 0

ball.type =function
ball.expression = x, y, z: sqrt(x^2+y^2+z^2) < 0.10 ? 1 : 0

box.type = function
box.expression = x, y, z: ( (y < 0.05 || y > 0.45) || x<0.075 || x>0.0950 ) ? 1 : 0

pulse.type = function
pulse.expression = t, t0, dt: sqrt((t-t0)^2)< dt ? 1 : 0

beat.type = function
beat.expression = t, cycle : cos( 2*3.141592*t/cycle) > 0.995

[compartments]
extracellular.type = expression
extracellular.expression = 1

myocyte.type = expression
myocyte.expression = box(position_x,position_y,position_z)

[model.scalar_field.u]
compartment = extracellular
cross_diffusion.u.expression = box(position_x,position_y,position_z) ? gamma_i + gamma_e : gamma_b
cross_diffusion.V.expression = gamma_i

[model.scalar_field.V]
compartment = myocyte
storage.expression = 1
reaction.expression = (-1)/(C_m)*( i_K1(V) + i_x1(V)*x1 + g_Na(m,h,j)*(V - E_Na)  + g_s(d,f) * ( V - E_s(Ca_i) ) - 32.50*beat(time-0, 500)*edge(position_x,position_y,position_z) - 25.0*pulse(time, 520, 7.5)*ball(position_x-2.75,position_y-0.25,position_z)  )
reaction.jacobian.V.expression = (-1)/(C_m)*( di_K1__dV(V) + di_x1__dV(V)*x1 + g_Na(m,h,j) + g_s(d,f) )
reaction.jacobian.x1.expression = (-1)/(C_m)*( i_x1(V) )
reaction.jacobian.m.expression = (-1)/(C_m)*( dg_Na__dm(m,h,j)*(V - E_Na) )
reaction.jacobian.h.expression = (-1)/(C_m)*( dg_Na__dh(m,h,j)*(V - E_Na) )
reaction.jacobian.j.expression = (-1)/(C_m)*( dg_Na__dj(m,h,j)*(V - E_Na) )
reaction.jacobian.d.expression = (-1)/(C_m)*( dg_s__dd(d,f) * ( V - E_s(Ca_i) )  )
reaction.jacobian.f.expression = (-1)/(C_m)*( dg_s__df(d,f) * ( V - E_s(Ca_i) )  )
reaction.jacobian.Ca_i.expression = (-1)/(C_m)*( g_s(d,f) * ( -dE_s__dCa(Ca_i) )  )
cross_diffusion.V.expression = gamma_i
cross_diffusion.u.expression = gamma_i
initial.expression = -80

[model.scalar_field.x1]
compartment = myocyte
storage.expression = 1
reaction.expression = a_x1(V) - x1 * (a_x1(V) + b_x1(V))
reaction.jacobian.V.expression = da_x1__dV(V) - x1 * ( da_x1__dV(V) + db_x1__dV(V) )
reaction.jacobian.x1.expression = -1*(a_x1(V) + b_x1(V))
initial.expression = a_x1(-80)/(a_x1(-80) + b_x1(-80))

[model.scalar_field.m]
compartment = myocyte
storage.expression = 1
reaction.expression = a_m(V) - m * (a_m(V) + b_m(V))
reaction.jacobian.V.expression = da_m__dV(V) - m * ( da_m__dV(V) + db_m__dV(V) )
reaction.jacobian.m.expression = -1*(a_m(V) + b_m(V))
initial.expression = a_m(-80)/(a_m(-80) + b_m(-80))

[model.scalar_field.h]
compartment = myocyte
storage.expression = 1
reaction.expression = a_h(V) - h * (a_h(V) + b_h(V))
reaction.jacobian.V.expression = da_h__dV(V) - h * ( da_h__dV(V) + db_h__dV(V) )
reaction.jacobian.h.expression = -1*(a_h(V) + b_h(V))
initial.expression = a_h(-80)/(a_h(-80) + b_h(-80))

[model.scalar_field.j]
compartment = myocyte
storage.expression = 1
reaction.expression = a_j(V) - j * (a_j(V) + b_j(V))
reaction.jacobian.V.expression = da_j__dV(V) - j * ( da_j__dV(V) + db_j__dV(V) )
reaction.jacobian.j.expression = -1*(a_j(V) + b_j(V))
initial.expression = a_j(-80)/(a_j(-80) + b_j(-80))

[model.scalar_field.d]
compartment = myocyte
storage.expression = 1
reaction.expression = a_d(V) - d * (a_d(V) + b_d(V))
reaction.jacobian.V.expression = da_d__dV(V) - d * ( da_d__dV(V) + db_d__dV(V) )
reaction.jacobian.d.expression = -1 *(a_d(V) + b_d(V))
initial.expression = a_d(-80)/(a_d(-80) + b_d(-80))

[model.scalar_field.f]
compartment = myocyte
storage.expression = 1
reaction.expression = a_f(V) - f * (a_f(V) + b_f(V))
reaction.jacobian.V.expression = da_f__dV(V) - f * ( da_f__dV(V) + db_f__dV(V) )
reaction.jacobian.f.expression = -1*(a_f(V) + b_f(V))
initial.expression = a_f(-80)/(a_f(-80) + b_f(-80))

[model.scalar_field.Ca_i]
compartment = myocyte
storage.expression = 1
reaction.expression = -1e-7 * g_s(d,f) * ( V - E_s(Ca_i) ) + 0.07 * (1e-7 - Ca_i)
reaction.jacobian.V.expression = -1e-7  * g_s(d,f)
reaction.jacobian.d.expression = -1e-7  * dg_s__dd(d,f) * ( V - E_s(Ca_i) )
reaction.jacobian.f.expression = -1e-7 *dg_s__df(d,f) * ( V - E_s(Ca_i) )
reaction.jacobian.Ca_i.expression = 1e-7 *g_s(d,f) * ( dE_s__dCa(Ca_i) ) - 0.07
initial.expression = 2e-7

[model.time_step_operator]
time_end = 500
time_step_max = 0.020
type = Alexander2
linear_solver.type = RestartedGMRes
linear_solver.preconditioner.type = SSOR
nonlinear_solver.linearization_threshold = 1e-4

[model.writer]
time_step = 0.100
vtk.path  = 2Dtissue_BR_model
