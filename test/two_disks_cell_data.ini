[grid]
dimension = 2
path = data/grids/two_disks.msh

[grid.cell_data.sigma]
type = scalar
path = data/cell/two_disks.txt

[parser_context]
phi.type = constant
phi.value = 1

[compartments]
outer.expression = (gmsh_id == 1)
inner.expression = (gmsh_id == 2)

# data based
[model.scalar_field.u_in]
compartment = inner
cross_diffusion.u_in.expression = (gmsh_id == 2) ? 1 : 0
outflow.outer.expression = phi*(u_in - u_out)
outflow.outer.jacobian.u_in.expression = phi
outflow.outer.jacobian.u_out.expression = -phi

[model.scalar_field.u_out]
compartment = outer
cross_diffusion.u_out.expression = 1 + sigma^2	# use of the grid data parameter (sigma := position_x)
storage.expression = 0
constrain.boundary.expression = position_x
outflow.inner.expression = phi*(u_out - u_in) 
outflow.inner.jacobian.u_out.expression = phi
outflow.inner.jacobian.u_in.expression = -phi

# analytical expr based
[model.scalar_field.v_in]
compartment = inner
cross_diffusion.v_in.expression = 1
outflow.outer.expression = phi*(v_in - v_out)
outflow.outer.jacobian.v_in.expression = phi
outflow.outer.jacobian.v_out.expression = -phi

[model.scalar_field.v_out]
compartment = outer
cross_diffusion.v_out.expression = 1 + position_x^2 # use analytical expresssion
storage.expression = 0
constrain.boundary.expression = position_x
outflow.inner.expression = phi*(v_out - v_in)
outflow.inner.jacobian.v_out.expression = phi
outflow.inner.jacobian.v_in.expression = -phi

[model]
is_linear = true
parser_type = ExprTk

[model.time_step_operator]
time_step_max = 1
time_end = 1

[model.reduce]
# compare solution between data and analytic diffusion: error(u - v)
u_error.evaluation.expression = (u_in - v_in)^2 + (u_out - v_out)^2
u_error.transformatiion.expression = arg: sqrt(arg)
u_error.warn.expression = arg: arg > 1e-7
