[grid]
dimension = 2
path = data/grids/two_disks.msh

[compartments]
outer.expression = (gmsh_id == 1)
inner.expression = (gmsh_id == 2)

[parser_context]
phi.type = constant
phi.value = 1

[parser_context.u_in_analytic]
type = function
expression = x, y: 2*4/(8*phi+5)*phi*sqrt(x^2+y^2)*cos(atan2(y,x))

[parser_context.u_out_analytic]
type = function
expression = x, y: 4*(sqrt(x^2+y^2)*(2*phi+1)+1/sqrt(x^2+y^2))*cos(atan2(y,x))/(8*phi+5)

[model.scalar_field.u_in]
compartment = inner
cross_diffusion.u_in.expression = 1
outflow.outer.expression = phi*(u_in - u_out)
outflow.outer.jacobian.u_in.expression = phi
outflow.outer.jacobian.u_out.expression = -phi

[model.scalar_field.u_out]
compartment = outer
cross_diffusion.u_out.expression = 1
storage.expression = 0
constrain.boundary.expression = position_x
outflow.inner.expression = phi*(u_out - u_in)
outflow.inner.jacobian.u_out.expression = phi
outflow.inner.jacobian.u_in.expression = -phi

[model]
is_linear = true
parser_type = ExprTk

[model.time_step_operator]
time_step_max = 1
time_end = 1

[model.reduce]
# max(u_h)
u_max.evaluation.expression = max(u_in, u_out)
u_max.reduction.expression = init, val, weight: max(init, val)
u_max.initial.value = -1e100
u_max.error.expression = arg: arg > 2
# min(u_h)
u_min.evaluation.expression = min(u_in, u_out)
u_min.reduction.expression = init, val, weight: min(init, val)
u_min.initial.value = 1e100
u_min.error.expression = arg: arg < -2
# error(u_h - u)
u_error.evaluation.expression = (sqrt(position_x^2+position_y^2) < 1) ? (u_in - u_in_analytic(position_x, position_y))^2 : (u_out - u_out_analytic(position_x, position_y))^2
u_error.transformatiion.expression = arg: sqrt(arg)
u_error.warn.expression = arg: arg > 1e-3
