[grid]
dimension = 2
extensions = 2 2
origin = -1 -1
refinement_level = 7

[parser_context]
gamma_i.type = constant
gamma_i.value = 3e-3 # 1/(\Omega*cm)

gamma_e.type = constant
gamma_e.value = 3e-3 # 1/(\Omega*cm)

gamma_b.type = constant
gamma_b.value = 3e-3 # 1/(\Omega*cm)

G.type = constant
G.value = 1.5 # S/cm^2

v_th.type = constant
v_th.value = 13 # mV

v_p.type = constant
v_p.value = 100 # mV

eta_1.type = constant
eta_1.value = 4.4 # S/cm^2

eta_2.type = constant
eta_2.value = 0.012

eta_3.type = constant
eta_3.value = 1

I_e.type = function
I_e.expression = x, y: 10*exp(-(x^2+y^2)/(4*gamma_i)) / (4*3.14159265359*gamma_i)

I_ion.type = function
I_ion.expression = v, w: G*v*(1-v/v_th)*(1-v/v_p)+eta_1*v*w

I_ion_dv.type = function
I_ion_dv.expression = v, w: (G*v_th*(v_p-2*v)+G*v*(3*v-2*v_p)+v_th*v_p*w*eta_1)/(v_th*v_p)

I_ion_dw.type = function
I_ion_dw.expression = v, w: eta_1 * v

flux.type = constant
flux.value = 1e-2

[compartments]
tissue.type = expression
tissue.expression = sqrt(position_x^2 + position_y^2) < .75^2 ? 1 : 0

bath.type = expression
bath.expression = sqrt(position_x^2 + position_y^2) >= .75^2 ? 1 : 0

[model.scalar_field.u_b]
compartment = bath
cross_diffusion.u_b.expression = gamma_b
outflow.tissue.expression = flux*(u_b - u_e)
outflow.tissue.jacobian.u_b.expression = flux
outflow.tissue.jacobian.u_e.expression = -flux
constrain.expression = (in_boundary && position_x > 0.95 && position_y > 0.95) ? 0 : null

[model.scalar_field.u_e]
compartment = tissue
cross_diffusion.u_e.expression = gamma_i + gamma_e
cross_diffusion.v.expression = gamma_i
outflow.bath.expression = flux*(u_e - u_b)
outflow.bath.jacobian.u_e.expression = flux
outflow.bath.jacobian.u_b.expression = -flux

[model.scalar_field.v]
compartment = tissue
storage.expression = 1
cross_diffusion.v.expression = gamma_i
cross_diffusion.u_e.expression = gamma_i
reaction.expression = - I_ion(v, w) + (time < 0.4 ? I_e(position_x, position_y) : 0)
reaction.jacobian.v.expression = I_ion_dv(v, w)
reaction.jacobian.w.expression = I_ion_dw(v, w)

[model.scalar_field.w]
compartment = tissue
storage.expression = 1
reaction.expression = eta_2*(v/v_p-eta_3*w)
reaction.jacobian.v.expression = eta_2/v_p
reaction.jacobian.w.expression = -eta_2^2

[model.time_step_operator]
type = Alexander2
time_end = 4
linear_solver.type = RestartedGMRes
linear_solver.convergence_condition.iteration_range = 0 1000

[model.writer.vtk]
path = bidomain_fhn_interface

[model.reduce]
u_mass.evaluation.expression = u_b + u_e
u_mass.warn.expression = arg: abs(arg) > 1e-2
