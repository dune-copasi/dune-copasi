if(NOT dune-copasi_FOUND)
  # Whether this module is installed or not
  set(dune-copasi_INSTALLED @MODULE_INSTALLED@)

  # Settings specific to the module
  @dune-copasi_INIT@

  # Package initialization
  @PACKAGE_INIT@

  #report other information
  set_and_check(dune-copasi_PREFIX "${PACKAGE_PREFIX_DIR}")
  set_and_check(dune-copasi_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
  set(dune-copasi_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
  set(dune-copasi_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@")
  set(dune-copasi_CXX_FLAGS_MINSIZEREL "@CMAKE_CXX_FLAGS_MINSIZEREL@")
  set(dune-copasi_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@")
  set(dune-copasi_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@")
  set(dune-copasi_DEPENDS "@dune-copasi_DEPENDS@")
  set(dune-copasi_SUGGESTS "@dune-copasi_SUGGESTS@")
  set(dune-copasi_MODULE_PATH "@PACKAGE_DUNE_INSTALL_MODULEDIR@")
  set(DUNE_PYTHON_VIRTUALENV_SETUP @DUNE_PYTHON_VIRTUALENV_SETUP@)

  include(CMakeFindDependencyMacro)

  cmake_policy(PUSH)
  cmake_policy(SET CMP0074 NEW)

  # setup dependencies
  find_dependency(dune-common)

  # make sure to find cmake modules for dune-common
  list(APPEND CMAKE_MODULE_PATH "${dune-common_MODULE_PATH}")
  include(DuneMacros)
  include(CheckCXXFeatures)
  include(DuneCxaDemangle)
  include(DuneMPI)

  # setup other dune dependecies
  set(ProjectName dune-copasi)
  find_file(dune-copasi_MODULE_DIR dune.module
    HINTS
      "${dune-copasi_PREFIX}"
      "${dune-copasi_PREFIX}/lib/dunecontrol/dune-copasi"
      "${dune-copasi_PREFIX}/lib64/dunecontrol/dune-copasi"
    REQUIRED
    NO_DEFAULT_PATH
  )
  string(REPLACE dune.module "" dune-copasi_MODULE_DIR ${dune-copasi_MODULE_DIR})

  dune_module_information(${dune-copasi_MODULE_DIR})
  dune_create_dependency_tree()
  dune_process_dependency_macros()

  # make sure to find cmake modules for dune-copasi
  list(APPEND CMAKE_MODULE_PATH "${dune-copasi_MODULE_PATH}")

  find_dependency(PkgConfig REQUIRED)
  pkg_search_module(muparser REQUIRED IMPORTED_TARGET muparser)
  find_dependency(TIFF)
  if(@DUNE_USE_FALLBACK_FILESYSTEM@)
    find_dependency(ghc_filesystem REQUIRED)
  else()
    find_dependency(Filesystem REQUIRED)
  endif()

  cmake_policy(POP)

  # import targets
  include("${CMAKE_CURRENT_LIST_DIR}/dune-copasi-targets.cmake")
endif()
