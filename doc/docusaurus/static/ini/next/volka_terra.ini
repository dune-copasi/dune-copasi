#########################################################################
# VOLKA-TERRA EQUATIONS:
#
# ∂ₜu = α·u   - β·u·v
# ∂ₜv = δ·u·v - γ·v
#
# See: https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations
#
# Note that there is not derivative on the positions x or y, so the
# functions are the same on every point in x and y for a given time t.
# Hence, we do not refine the grid at all.
#
#########################################################################

[grid]
# extensions of the grid in x and y directions
extensions = 1 1
# number of cells of the initial grid in x and y directions
cells = 1 1

# defines a compartment with the name "domain"
[compartments.domain]
expression = 1

# Define constants with name "alpha", "beta", "delta", and "gamma"
# representing α, β, δ, and γ respectively
[parser_context.alpha]
type = constant
value = 0.666666
[parser_context.beta]
type = constant
value = 1.33333
[parser_context.delta]
type = constant
value = 1
[parser_context.gamma]
type = constant
value = 1

# our model is linear because there is a non-linear reaction part
[model]
is_linear = false

##### Definition of the equation to solve function u(x,y,t) ######

# Declares the compartment where this function is defined
[model.scalar_field.u]
compartment = domain

# Declares that the equation is transient
[model.scalar_field.u.storage]
expression = 1

# Declares the reaction part on the diffusion-reaction equation for equation for u
[model.scalar_field.u.reaction]
expression = alpha*u - beta*u*v

# Declares the jacobian of the reaction of u
[model.scalar_field.u.reaction.jacobian.u]
# ∂ᵤ(α·u - β·u·v) = α - β·v
expression = alpha - beta*v
[model.scalar_field.u.reaction.jacobian.v]
# ∂ᵥ(α·u - β·u·v) = - β·u
expression = -beta*u

[model.scalar_field.u.initial]
# function for u(x,y,0)
expression = 1

##### Definition of the equation to solve function v(x,y,t) ######

# Declares the compartment where this function is defined
[model.scalar_field.v]
compartment = domain

# Declares that the equation is transient
[model.scalar_field.v.storage]
expression = 1

# Declares the reaction part on the diffusion-reaction equation for equation for v
[model.scalar_field.v.reaction]
expression = delta*u*v - gamma*v

# Declares the jacobian of the reaction of v
[model.scalar_field.v.reaction.jacobian.u]
# ∂ᵤ(δ·u·v - γ·v) = δ·v
expression = delta*v
[model.scalar_field.v.reaction.jacobian.v]
# ∂ᵥ(δ·u·v - γ·v) = δ·u - γ
expression = delta*u-gamma

[model.scalar_field.v.initial]
# function for v(x,y,0)
expression = 1

[model.time_step_operator]
# initial time of the simulation
time_begin = 0
# final time of the simulation
time_end = 20
# limit the maximum time-step
time_step_max = 0.25
