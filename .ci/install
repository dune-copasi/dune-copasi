#!/usr/bin/env bash

# build and install

# variables from DUNE_OPTIONS_FILE
#   (optional) CMAKE_FLAGS
#   (optional) SUDOCMD
#   (optional) CPACK_GENERATORS
#   (optional) CPACK_PACKAGE_DIRECTORY

set +e

# set colors for better print
GREEN=$(tput setaf 2 :-"" 2>/dev/null)
RESET=$(tput sgr0 :-"" 2>/dev/null)

set -e

# options file may be passed as argument
[ ! -z "$1" ] && DUNE_OPTIONS_FILE="$1"

# load dune opts
CMAKE_FLAGS="$(. ${DUNE_OPTIONS_FILE}; eval echo \$CMAKE_FLAGS)"
SUDOCMD="$(. ${DUNE_OPTIONS_FILE}; eval echo \$SUDOCMD)"

# load useful functions
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $SCRIPT_PATH/util

SOURCEDIR=${SCRIPT_PATH}/..
BUILD_PATH=/tmp/dune-copasi-build

print_opts_file() {
  cat "${DUNE_OPTIONS_FILE}"
}

cleanup() {
  echo "removig intermediate results"
  rm -rf $BUILD_PATH
}

# set up verbose output in case of failure
ONFAILURE_PROG="git gcc g++ python pip python3 pip3 cmake $SUDOCMD"
ONFAILURE_VARS="PATH SUDOCMD DUNE_OPTIONS_FILE CMAKE_FLAGS"
ONFAILURE_CMD="ls cleanup"

trap onfailure EXIT

[[ -d ${BUILD_PATH} ]] && ONFAILURE_MESSAGE+="run this script where no folder 'build-cmake' exists\n" && exit 1
mkdir $BUILD_PATH && cd $BUILD_PATH

echo "cmake $CMAKE_FLAGS $SOURCEDIR"
eval cmake $CMAKE_FLAGS $SOURCEDIR

$SUDOCMD cmake --build $BUILD_PATH --target install

for generator in $CPACK_GENERATORS; do
  cpack -G $generator -B $CPACK_PACKAGE_DIRECTORY CPackConfig.cmake
done

cd $SCRIPT_PATH
trap cleanup EXIT
