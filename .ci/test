#!/usr/bin/env bash

# unit tests script for all CIs

# input
#   DUNE_OPTIONS_FILE absolute path to options file

set +e

# set colors for better print
GREEN=$(tput setaf 2 :-"" 2>/dev/null)
RESET=$(tput sgr0 :-"" 2>/dev/null)

set -e

# options file may be passed as argument
[ ! -z "$1" ] && DUNE_OPTIONS_FILE="$1"

# load useful functions
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $SCRIPT_DIR/util

SOURCEDIR=${SCRIPT_DIR}/../test


print_opts_file() {
  cat "${DUNE_OPTIONS_FILE}"
}

print_cmake_error() {
  cat "${BUILD_PATH}/CMakeFiles/CMakeError.log"
}

cleanup() {
  echo "removig intermediate results"
  rm -rf "${BUILD_PATH}"
}

# set up verbose output in case of failure
ONFAILURE_PROG="git gcc g++ python pip python3 pip3 cmake"
ONFAILURE_VARS="PATH DUNE_OPTIONS_FILE "
ONFAILURE_VARS+="DEBUG_CMAKE_FLAGS RELEASE_CMAKE_FLAGS"
ONFAILURE_CMD="pwd ls cleanup"

trap onfailure EXIT

echo $GREEN "============================ Unit Tests ============================" $RESET

BUILD_PATH=/tmp/build-unit-tests
[[ -d ${BUILD_PATH} ]] && ONFAILURE_MESSAGE+="the folder '${BUILD_PATH}' should not exist prior running this script\n" && exit 1
mkdir $BUILD_PATH && cd $BUILD_PATH

if [[ -n "$DUNE_OPTIONS_FILE" ]]; then
  DEBUG_CMAKE_FLAGS="$(. $DUNE_OPTIONS_FILE; eval echo \$CMAKE_FLAGS)"
fi

echo "cmake $DEBUG_CMAKE_FLAGS $SOURCEDIR"
eval cmake $DEBUG_CMAKE_FLAGS $SOURCEDIR
cmake --build . --target build_unit_tests
ctest -j4 -L "unit" --output-on-failure

echo $GREEN "============================ System Tests ============================" $RESET

BUILD_PATH=/tmp/build-system-tests
[[ -d ${BUILD_PATH} ]] && ONFAILURE_MESSAGE+="the folder '${BUILD_PATH}' should not exist prior running this script\n" && exit 1
mkdir $BUILD_PATH && cd $BUILD_PATH

if [[ -n "$DUNE_OPTIONS_FILE" ]]; then
  RELEASE_CMAKE_FLAGS="$(. $DUNE_OPTIONS_FILE; eval echo \$CMAKE_FLAGS)"
fi

echo "cmake $RELEASE_CMAKE_FLAGS $SOURCEDIR"
eval cmake $RELEASE_CMAKE_FLAGS $SOURCEDIR
cmake --build . --target build_system_tests
ctest -j4 -L "system" --output-on-failure

cd $SCRIPT_PATH
trap cleanup EXIT
