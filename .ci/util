#!/usr/bin/env bash

# This is a helper function to diagnose error on different systems.
# Use `onfailure` function together with the `trap` command:
#
#   trap onfailure EXIT
#
#   # some custom script
#
#   trap - EXIT

# lets assume no symlink is used
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# default executables to check binary folder and version on failure
[ -z "$ONFAILURE_PROG" ] && ONFAILURE_PROG='bash'

# default variables to expand on failure
[ -z "$ONFAILURE_VARS" ] && ONFAILURE_VARS="PATH"

# default commands to run on failure
[ -z "$ONFAILURE_CMD" ] && ONFAILURE_CMD="pwd"

# default exit message on failure
[ -z "$ONFAILURE_MESSAGE" ] && ONFAILURE_MESSAGE="A failure has been produced when executing:\n\t'${0} ${@}'\n\n"

onfailure() {

  FAILURE_TYPE="$?"

  # do not exit this function even on case of failures
  set +e

  RED=$(tput setaf 1 :-"" 2>/dev/null)
  GREEN=$(tput setaf 2 :-"" 2>/dev/null)
  YELLOW=$(tput setaf 3 :-"" 2>/dev/null)
  RESET=$(tput sgr0 :-"" 2>/dev/null)

  echo "${YELLOW}*************************** On Failure: Commands ****************************" $RESET >&2
  for i in $(echo $ONFAILURE_CMD); do
    echo "[${YELLOW}${i}${RESET}]:" >&2
    FUNC="$($i 2>&1)" >&2
    if [ -z "$FUNC" ]; then
      echo $RED "NOT OUTPUT" $RESET | sed 's/^/  /' >&2
    else
      echo "$FUNC" | sed 's/^/  /' >&2
    fi
    echo "" >&2
  done

  cd $HOME

  echo "${YELLOW}*************************** On Failure: Executables Info **************************" $RESET >&2
  for i in $(echo $ONFAILURE_PROG); do
    echo "[${YELLOW}${i}${RESET}]:" >&2
    if command -v $i &> /dev/null; then
      EXEC_PATH=$(which $i 2>&1)
      VERSION="$($EXEC_PATH --version 2>&1)"
      echo "  which:" >&2
      echo "$EXEC_PATH" | sed 's/^/    /' >&2
      echo "  version:"
      echo "$VERSION" | sed 's/^/    /' >&2
    else
      echo $RED "NOT FOUND" $RESET | sed 's/^/  /' >&2
    fi
    echo "" >&2
  done

  echo "${YELLOW}*************************** On Failure: Variables *********************************" $RESET >&2
  for i in $(echo $ONFAILURE_VARS); do
    echo "[${YELLOW}${i}${RESET}]:" >&2
    VAR=$(eval echo "\$$i")
    if [ -z "$VAR" ]; then
      echo $RED "NOT FOUND" $RESET | sed 's/^/  /' >&2
    else
      echo "$VAR" | sed 's/^/  /' >&2
    fi
    echo "" >&2
  done

  echo "${YELLOW}*************************** On Failure: Message **************************" $RESET >&2

  echo $RED "" >&2
  echo "EXIT CODE: $FAILURE_TYPE" $RESET | sed 's/^/  /' >&2
  echo "" $YELLOW >&2
  printf "$ONFAILURE_MESSAGE" $RESET | sed 's/^/  /' >&2

	exit $FAILURE_TYPE
}
