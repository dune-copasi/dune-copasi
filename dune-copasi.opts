#!/usr/bin/env bash

# This file sets sensible defaults options for building and installing dune-copasi and its dependencies
# - Find the operating system target
# - Set default DUNE_ and CMAKE_ values, if they are not in environment
# - Any env variable starting with CMAKE_ or DUNE_ will added to the cmake flags
# - The resulting CMAKE_FLAGS and MAKE_FLAGS values will be prepended to the CMAKE_OPTIONS and MAKE_OPTIONS env variable (if any)
# - In *nix systems, it will try to find out if installation requires sudo
#
# If run in script mode (e.g. ./dune-copasi.opts), this script will print out
# the installation prefix, OS target, and cmake flags.

# get install prefix from CMAKE_FLAGS env
for flag in $CMAKE_OPTIONS; do
  [[ ${flag#-D} == CMAKE_INSTALL_PREFIX* ]] && CMAKE_INSTALL_PREFIX=${flag#-DCMAKE_INSTALL_PREFIX}
done
# remove "=" or ":PATH=" prefix
CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX#=}
CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX#:PATH=}
# remove quotations
CMAKE_INSTALL_PREFIX=$(echo $CMAKE_INSTALL_PREFIX | tr -d "'")

# if not found, set a default install path
export CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:-/opt/dune}

# create directory if non existent (skip in script mode)
if [[ ! $(basename $0) == dune-copasi.opts ]] ; then
  mkdir -p $CMAKE_INSTALL_PREFIX &> /dev/null
fi

SUDOCMD=""

# if not set, find out OS target
if [[ -z $OS_TARGET ]]; then
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS_TARGET="linux"
    [ ! -w "$CMAKE_INSTALL_PREFIX" ] && SUDOCMD="sudo"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS_TARGET="osx"
    OS_VERSION=${MACOSX_DEPLOYMENT_TARGET:-${OSTYPE#darwin}}
    [ ! -w "$CMAKE_INSTALL_PREFIX" ] && SUDOCMD="sudo"
  elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    MACHINE="$(eval gcc -dumpmachine 2>&1)"
    [[ "$MACHINE" = *'x86_64'* ]] && OS_TARGET="win64-mingw"
    [[ "$MACHINE" = *'i686'* ]] && OS_TARGET="win32-mingw"
    export CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS:-"'-static -Wa,-mbig-obj -fvisibility=hidden -fpic'"}
  else
    OS_TARGET="$OSTYPE"
    echo "Warning: Unknown OS_TARGET='$OS_TARGET'!"
  fi
fi

# default cmake flags
export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:-"'${CMAKE_INSTALL_PREFIX}'"}
export CMAKE_GENERATOR=${CMAKE_GENERATOR:-"'Unix Makefiles'"}
export CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Release}
export CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD:-17}
export CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS:-"'-fvisibility=hidden -fpic'"}
export CMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE:-"'-O3 -DNDEBUG'"}
export CMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO:-"'-O2 -g3 -DNDEBUG -fno-omit-frame-pointer'"}
export CMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG:-"'-O0 -g'"}
export CMAKE_DISABLE_FIND_PACKAGE_MPI=${CMAKE_DISABLE_FIND_PACKAGE_MPI:-OFF}

if [[ "$DUNE_COPASI_USE_STATIC_DEPS" =~ ^(ON|on|ON|TRUE|true|1)$ ]];then
  CMAKE_OPTIONS+=" -DGMPXX_INCLUDE_DIR:PATH='"${CMAKE_INSTALL_PREFIX}"/include'"
  CMAKE_OPTIONS+=" -DGMPXX_LIB:FILEPATH='"${CMAKE_INSTALL_PREFIX}"/lib/libgmpxx.a'"
  CMAKE_OPTIONS+=" -DGMP_LIB:FILEPATH='"${CMAKE_INSTALL_PREFIX}"/lib/libgmp.a'"
  CMAKE_OPTIONS+=" -Dfmt_ROOT='"${CMAKE_INSTALL_PREFIX}"'"
  CMAKE_OPTIONS+=" -DCMAKE_DISABLE_FIND_PACKAGE_QuadMath=TRUE"
  CMAKE_OPTIONS+=" -DF77=true"
  CMAKE_OPTIONS+=" -DBUILD_SHARED_LIBS=OFF"
  export DUNE_USE_ONLY_STATIC_LIBS='ON'
fi

# default dune flags
export DUNE_PDELAB_ENABLE_TRACING=${DUNE_PDELAB_ENABLE_TRACING:-ON}

# default make flags
if [[ "$CMAKE_BUILD_TYPE" == "Debug" ]]; then
  MAKE_FLAGS="VERBOSE=1"
fi

# get environment variables (excluding CMAKE_FLAGS, CMAKE_OPTIONS, and DUNE_CONTROL_PATH)
ENV_VARS=$(compgen -e)
ENV_VARS=${ENV_VARS//CMAKE_FLAGS/}
ENV_VARS=${ENV_VARS//CMAKE_OPTIONS/}
ENV_VARS=${ENV_VARS//DUNE_CONTROL_PATH/}

_CMAKE_FLAGS=""
_DUNE_FLAGS=""
# loop env variables and add values starting with CMAKE_ and DUNE_ into the cmake flags
for var in $ENV_VARS; do
  if [[ "${var}" == "CMAKE_"* ]]; then
    _CMAKE_FLAGS+="-D${var}=${!var} "
  elif [[ "${var}" == "DUNE_"* ]]; then
    _DUNE_FLAGS+="-D${var}=${!var} "
  fi
done

# final flags
CMAKE_FLAGS="$_CMAKE_FLAGS $_DUNE_FLAGS $CMAKE_OPTIONS"
MAKE_FLAGS="$MAKE_OPTIONS $MAKE_FLAGS"

# if called in script mode, print cmake flags and os target
if [[ $(basename $0) == dune-copasi.opts ]] ; then
  # set colors for better print
  GREEN=$(tput setaf 2 :-"" 2>/dev/null)
  RESET=$(tput sgr0 :-"" 2>/dev/null)

  echo "${GREEN}Installation Prefix:${RESET}"
  echo "$CMAKE_INSTALL_PREFIX" | sed 's/^/  /'
  echo "${GREEN}OS Type:${RESET}"
  echo "$OS_TARGET" | sed 's/^/  /'
  echo "${GREEN}CMake flags:${RESET}"
  echo "$CMAKE_FLAGS" | sed 's/^/  /'
  echo "${GREEN}Make flags:${RESET}"
  echo "$MAKE_FLAGS" | sed 's/^/  /'
fi
