---

stages:
  - setup
  - check
  - build
  - codequality
  - deploy

.default_tags: &default_tags
  tags:
    - "cores:4"

.dind_docker_tags: &dind_docker_tags
  tags:
    - "dind"

variables:
  DUNECONTROL: dunecontrol
  CPACK_GENERATORS: 'DEB'
  CPACK_PACKAGE_DIRECTORY: $CI_PROJECT_DIR/tmp
  BASE_IMAGE_VERSION:
    value: "v2.0.0-git"
    options:
      - "v2.0.0-git"        # Main dependecy base image
      - "v2.0.0-git-tmp"    # Temporary (one time testing)
    description: "Key to tag images in the registry. Use '*-tmp' key to try out changes that need to rebild the dependencies image"
  FORCE_REBUILD_BASE_IMAGE:
    value: "false"
    options:
      - "true"
      - "false"
    description: "Force rebuild of base image"

.docker_variables: &docker_variables
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE: docker:24.0.6-dind
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

.debian_clang: &debian_clang
  DUNECI_OS: debian
  BASE_IMAGE: debian:trixie
  DEPENDENCIES_IMAGE: ${CI_REGISTRY}/copasi/dune-copasi/dependencies:${DUNECI_OS}-${TOOLCHAIN}-${BASE_IMAGE_VERSION}

.setup: &setup
  image: ${DOCKER_IMAGE}
  stage: setup
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY/copasi/dune-copasi
    - docker build
        --build-arg BASE_IMAGE=${BASE_IMAGE}
        --build-arg TOOLCHAIN=${TOOLCHAIN}
        --build-arg BUILDKIT_INLINE_CACHE=1
        --target setup-env
        -t ${DEPENDENCIES_IMAGE} .
    - docker push ${DEPENDENCIES_IMAGE}
    - docker logout $CI_REGISTRY/copasi/dune-copasi
  rules:
    - if: '$FORCE_REBUILD_BASE_IMAGE == "true"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == "latest"'
  <<: *dind_docker_tags

.build: &build
  image: ${DEPENDENCIES_IMAGE}
  stage: build
  script:
    - ./.ci/install dune-copasi.opts
    - ./.ci/test dune-copasi.opts
    - mkdir -p packages
    - mv tmp/dune-copasi-*-Runtime.deb packages/dune-copasi-runtime.deb
  <<: *default_tags
  artifacts:
    paths:
      - packages
    expire_in: 1h

.codequality: &codequality
  image: ${DEPENDENCIES_IMAGE}
  stage: codequality
  script:
    - CODE_CHECKER_REPORT_PATH=$CI_PROJECT_DIR/code_checker_report ./.ci/install dune-copasi.opts
  <<: *default_tags
  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code_checker_report/gl-code-quality-report.json

.deploy: &deploy
  image: ${DOCKER_IMAGE}
  stage: deploy
  script:
    # login into registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY/copasi/dune-copasi
    - DOCKER_TAG="${DUNECI_OS}-${TOOLCHAIN}-${CI_COMMIT_REF_NAME}"
    - DOCKER_DEPLOY_IMAGE=$CI_REGISTRY/copasi/dune-copasi/dune-copasi:${DOCKER_TAG}
    # set directory to get packages from the image
    - mkdir -p $CI_PROJECT_DIR/packages
    # build final production image using packages from artifacts
    - docker build
      --build-arg PRODUCTION_BASE_IMAGE=${BASE_IMAGE}
      --file docker/deploy.dockerfile
      --tag ${DOCKER_DEPLOY_IMAGE} .
    # push images into registry
    - docker push ${DOCKER_DEPLOY_IMAGE}
    # set alternative and simpler names
    - |
      if [[ ! -z "${MASTER_IMAGE}" ]]; then
        DOCKER_TAG=${CI_REGISTRY}/copasi/dune-copasi/dune-copasi:${CI_COMMIT_REF_NAME}
        docker tag ${DOCKER_DEPLOY_IMAGE} ${DOCKER_TAG}
        docker push ${DOCKER_TAG}
        if [[ "$CI_COMMIT_BRANCH" == "latest" ]]; then
          DOCKER_TAG=${CI_REGISTRY}/copasi/dune-copasi/dune-copasi:latest
          docker tag ${DOCKER_DEPLOY_IMAGE} ${DOCKER_TAG}
          docker push ${DOCKER_TAG}
        fi
      fi
    - docker logout ${CI_REGISTRY}/copasi/dune-copasi
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == "latest"'
  <<: *dind_docker_tags

codespell:
  variables:
    <<: *debian_clang
  <<: *default_tags
  stage: check
  image: ${DEPENDENCIES_IMAGE}
  script:
  - codespell
    --skip=./doc/docusaurus/yarn.lock

setup:debian_clang:
  variables:
    <<: *docker_variables
    <<: *debian_clang
  <<: *setup

build:debian_clang:
  variables:
    <<: *debian_clang
  <<: *build
  dependencies:
    - setup:debian_clang

codequality:debian_clang:
  variables:
    <<: *debian_clang
  <<: *codequality
  dependencies:
    - setup:debian_clang

deploy:debian_clang:
  variables:
    <<: *docker_variables
    <<: *debian_clang
  <<: *deploy
  dependencies:
    - build:debian_clang
